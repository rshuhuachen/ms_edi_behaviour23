---
title: "Question asking"
author: "Rebecca S. Chen"
format: html
editor: visual
bibliography: references.bib
---

```{r setup, echo=F, message=F, warning=F}

# load packages
pacman::p_load(lme4, tidyverse, data.table, performance, DHARMa, jtools, readxl, kableExtra)

### Load data ####

#registration 
reg <- fread("../data/pre_survey/Registration_clean.tsv")

#behavioural
load("../data/question_asking/question_asking_data_condensed_for_analysis.RData")

#survey
load("../data/post_survey/clean_survey_all.RData")

#plenary only
plenary <- read_excel("../data/question_asking/plenary_corrected_manual.xlsx")
plenary <- plenary %>% dplyr::select(c(session_id, speaker_pronoun, question_nr, questioner_gender))

plenary <- unique(plenary)

plenary <- plenary %>% mutate(questioner_female=case_when(
  questioner_gender == "F" ~ 1,
  questioner_gender == "M" ~ 0
))

prop_reg_female <- nrow(subset(reg, Pronouns == "Female")) / 
  nrow(subset(reg, Pronouns != "No answer"))

plenary$prop_audience_female <- prop_reg_female

### Set theme ####
source("../scripts/EDI_ggplot_theme.R")

### Load function to output model results
source("../scripts/function_collect_model_output.R")

```

**Do women ask less questions than men?**

We investigated gender disparity in question-asking using two lines of evidence: by collecting observational data on question-asking behaviour during 24/67 question & answer (Q&A) sessions and through self-reports on question asking collected in the post-congress survey.

## Observational data {#sec-mainmodel}

To identify a gender disparity in question asking behaviour from the observational data, we fitted a binomial generalized linear mixed effect model (GLMM), where the dependent variable indicates whether a question was asked by a woman (1) or a man (0), while accounting for the gender proportion of the audience and the nonindependence of talks within a session.

First, let's have a look at the data used to build this model. To answer this research question, we only focus on a subset of the data: those sessions that were unmanipulated, and we excluded questions that were a follow up question from the same person, asked without raising a hand first, and asked by the host. Before building the model, we make sure that some variables such as the day, room number, the duration of the Q&A, whether a talk was given as part of the general sessions or symposia, talk number within a session, and question number was not associated with the gender of the quesioner.

Lastly, we repeat the analysis with a conserved dataset that excludes any data that had some type of uncertainty.

### Preparing data and validation of potential covariates

```{r qa prep, echo=T, message=F, warning = F}

# subset data

data_control <- subset(data_analysis, treatment == "Control" &
                     is.na(followup) & is.na(jumper)&
                     is.na(host_asks) & 
                    !grepl("speaker|questioner", allocator_question))

data_control <- droplevels(data_control)
# second dataset to test robustness to data with uncertainty

data_conserved <- subset(data_control, uncertainty_count_audience == 0 &
                           uncertainty_count_hands == 0)

# explore data

data_control %>% select(c(session_id, talk_nr, question_nr, talk_id, gender_questioner_female, audience_total, audience_women_prop)) %>% str()

# how many questions were asked by women (1) and men (0) per session?
table(data_control$session_id, data_control$gender_questioner_female) %>% kbl() %>%
  kable_classic_2()

# validation some potential confounding variables
summary(glmer(gender_questioner_female ~ symp_general + (1|session_id/talk_id), family = "binomial", offset=boot::logit(audience_women_prop), data = data_control)) #NS

summary(glmer(gender_questioner_female ~ talk_nr + (1|session_id/talk_id), family = "binomial", offset=boot::logit(audience_women_prop), data = data_control)) #NS

summary(glmer(gender_questioner_female ~ question_nr + (1|session_id/talk_id), family = "binomial", offset=boot::logit(audience_women_prop), data = data_control)) #NS

summary(glmer(gender_questioner_female ~ no_observers + (1|session_id/talk_id), family = "binomial", offset=boot::logit(audience_women_prop), data = data_control)) #NS

summary(glmer(gender_questioner_female ~ duration_qa + (1|session_id/talk_id), family = "binomial", offset=boot::logit(audience_women_prop), data = data_control)) #NS

summary(glmer(gender_questioner_female ~ time + (1|session_id/talk_id), family = "binomial", offset=boot::logit(audience_women_prop), data = data_control)) #NS

```

### Build model

Nothing is significant, so let's build the model

```{r qa general, echo=T, message=F, warning = F}

m_qa_general <- glmer(gender_questioner_female ~ 1 + (1|session_id/talk_id), family = "binomial", offset=boot::logit(audience_women_prop), data = data_control)

# model output
summary(m_qa_general)

# use helper function to collect model output in data frame
m_qa_general_out <- collect_out(model = m_qa_general, null = NA,  name = "QA_justIC", n_factors = 0, type = "qa", save="yes", dir="../results/question-asking/")

m_qa_general_out %>% t() %>% kbl() %>%
  kable_classic_2()
```

Looking at the model output, `r paste0("The probability that a woman asks a question is ", round(plogis( summary(m_qa_general)$coef[1,1]) * 100, 3), " % while taking into account the gender proportion of the audience. The null hypothesis therefore predicts that this probability is around 50%")`

## Plenary sessions

We repeated the analysis above with data collected during plenary sessions (N = 11) only. During plenary sessions, we only collected data on the gender of people asking questions, as we could not count the audience reliability due to the size of the room. Instead, we use the proportion of women who registered for the congress to correct for the gender proportions in the audience.

![Plenary speakers](../data/PlenarySpeakersBehaviour2023.jpg)

```{r plenary, echo = T, message = F, warning=F}

# explore data
plenary %>% head() %>% kbl() %>% kable_classic_2() 

# how many questions were asked by women (1) and men (0) per plenary talk?

table(plenary$session_id, plenary$questioner_female)

# model similar to above
m_plenary <- glmer(questioner_female ~ 1 + (1|session_id), data = plenary,
              offset = boot::logit(prop_audience_female), family = "binomial")

summary(m_plenary)

# helper function to collect output 
m_plenary_out <- collect_out(model = m_plenary, null = NA, name = "QA_plenary_justIC", n_factors = 0,type = "qa", save="yes", dir="../results/question-asking/")

m_plenary_out %>% t() %>% kbl() %>%
  kable_classic_2()

# we don't have enough power to present the output of the following model, but as a curiosity we wondered if the gender disparity changed depending on the gender of the speaker

summary(glmer(questioner_female ~ speaker_pronoun + (1|session_id), data = plenary,
              offset = boot::logit(prop_audience_female), family = "binomial"))

# although not significant, the gender bias seems to get worse when the speaker is female (intercept more negative)

```

## Self-reports

Similarly, we identified a gender disparity in question asking using the self-reports from the post-congress survey by fitting a binomial generalized linear model (GLM), using the binomial response to the question "Did you ask a question at the congress" (1 = yes, 0 = no) as the dependent variable and the self-reported gender identity (woman, man, non-binary, other) as the independent variable.

First, let's look at the data structure. Due to the difference in data structure, here we include gender as a fixed effect and assess the performance of this model compared to the null model (just the intercept) with a likelihood-ratio test.

```{r selfreport, echo = T, message=F}

survey %>% select(c(id, gender, pronoun, age, ask_questions)) %>% head()

table(survey$gender, survey$ask_questions) %>% kbl() %>%
  kable_classic_2()

# reorder factors
survey$gender <- factor(survey$gender, levels = c("Male", "Female", "Non-binary"))

# build model
survey_qa_null <- glm(ask_questions ~ 1, data = subset(survey, !is.na(gender)), family = "binomial")

survey_qa <- glm(ask_questions ~ gender, data = subset(survey, !is.na(gender)), family = "binomial")

summary(survey_qa)

m_survey_out <- collect_out(model = survey_qa, null = survey_qa_null, n_factors=2,name="qa_survey_general",type="survey", save = "yes", dir = "../results/question-asking/")

m_survey_out %>% t() %>% kbl() %>%
  kable_classic_2()

```

## Plot output

Next, we can plot the model output in a single figure.

```{r plot, echo = T, message=F, warning=F, fig.width=8, fig.height=10}

# combine output from all sessions and plenaries 
m_main_general <- rbind(m_qa_general_out, m_plenary_out)
m_main_general$name <- c("Asking questions", "Asking questions - plenary") 

ggplot(m_main_general) +
  geom_point(aes(x = intercept_estimate, y = name), size = 5) + 
  geom_segment(aes(x = intercept_ci_lower, xend = intercept_ci_higher, y = name),
               linewidth=0.5) +
  geom_vline(xintercept = 0, col = "red", linetype = "dotted") +
  labs(x = "Intercept and 95% CI", y = "Model") + 
  geom_text(aes(label = "Male bias", y = 2.5, x = -1, size = 4))+
  geom_text(aes(label = "Female bias", y = 2.5, x = 1, size = 4)) +
  geom_segment(aes(x = -0.2, xend = -2.3, y = 2.3),
               col = "black", arrow = arrow(length=unit(0.2, "cm")))+
  geom_segment(aes(x = 0.2, xend = 2.3, y = 2.3),
               col = "black", arrow = arrow(length=unit(0.2, "cm"))) +
  theme(legend.position = "none") -> plot_1_qa

### also add survey

# convert to include both female and non-binary

m_survey_out$name <- c("Asked a question") 

m_survey_out_long <- data.frame(factor = c("Female", "Non-binary"),
                                estimate = c(m_survey_out$est_genderFemale, m_survey_out$`est_genderNon-binary`),
                                lower = c(m_survey_out$lowerCI_genderFemale, m_survey_out$`lowerCI_genderNon-binary`),
                                upper = c(m_survey_out$higherCI_genderFemale, m_survey_out$`higherCI_genderNon-binary`))

ggplot(m_survey_out_long) +
  geom_point(aes(x = estimate, y = factor), size = 5) + 
  geom_segment(aes(x = lower, xend = upper, y = factor),
               linewidth=1) +
  geom_vline(xintercept = 0, col = "red", linetype = "dotted") +
  labs(x = "Gender effect estimate and 95% CI", y = "Model") + 
  xlim(-2, 3.5) +
  geom_text(aes(label = "Male bias", y = 2.5, x = -1, size = 4))+
  geom_segment(aes(x = -0.3, xend = -1.8, y = 2.4),
               col = "black", arrow = arrow(length=unit(0.2, "cm")))+
  theme(legend.position = "none") -> plot_2_qa_survey

cowplot::plot_grid(plot_1_qa, plot_2_qa_survey, ncol = 1,
                   align = "hv", axis = "lb", labels = c("a) Behavioural data", "b) Survey data")) -> plot_qa

plot_qa

```

## Supplementary: rerun models with conservative data

As mentioned, we repeated the analysis on the observational data with the 'conservative' data set, which excluded any questions that some level of uncertainty in the collection. We don't do this for the plenary sessions as the audience was not counted and any other uncertainty would have been excluded from the initial data set either way.

```{r conserved, echo=T, message=F, warning=F}

summary(glmer(gender_questioner_female ~ 1 + (1|session_id/talk_id), family = "binomial", offset=boot::logit(audience_women_prop), data = data_conserved))

```

The model results seem virtually identical!

## Supplementary: inter-observer reliability

The data used above merge data collected by multiple observers, after we checked whether the reliability between different observers was high enough. Below you will find an example of how we calculated this IOR (inter-observer reliability) and the full script can be found under `scripts/2_question_asking/ior.R`.

```{r ior setup, echo=F, message=F, warning=F, error=F}

### Load pacakges ####

pacman::p_load(tidyverse, data.table, irr, cowplot)

### Load data ####
load(file = "../data/question_asking/combined_session_talk_question_all_long_withtreatment.RData")

# introduce new column to all_data
all_data_treatment <- all_data_treatment %>% mutate(proportion_audience_women = audience_women/audience_total,
                                                    proportion_audience_men = audience_men/audience_total, 
                                                    hands_women = as.numeric(hands_total) - as.numeric(hands_men),
                                                    talk_id = paste0(session_id, "_", talk_nr),
                                                    question_id = paste0(session_id, "_", talk_nr, "_", question_nr))


# select only relevant data
session <- all_data_treatment %>% select(c(session_id, observer_talk, host_1_gender, host_1_age)) %>% unique()
talk <- all_data_treatment %>% select(c(session_id, talk_nr, talk_id, observer_talk, speaker_gender_infer, speaker_age, 
                                        audience_total, audience_men, duration_qa)) %>% unique()
question <- all_data_treatment %>% select(session_id, talk_nr, talk_id, question_id, observer_talk, question_nr, room_size, hands_total,
                                          hands_men, questioner_age, questioner_gender) %>% unique()

session <- subset(session, session_id != 36 & session_id != 94 & session_id != 44) # exclude changing of hosts

```

```{r ior , echo=T, message=F, warning=F, error=F}

## Example of calculating Cohen's kappa

###### Host gender ####
host_gender <- subset(session, !is.na(host_1_gender)) # exclude missing data

wide_host_gender <- spread(host_gender[,c("session_id", "observer_talk", "host_1_gender")], 
                           observer_talk, host_1_gender)

# treat observer 1 and 2 as one unit, and observer 3 and 4 as one unit
wide_host_gender_a <- wide_host_gender[,c(1:3)]
wide_host_gender_b <- wide_host_gender[,c(1,4,5)]
names(wide_host_gender_a) <- c("session_id", "observer_a", "observer_b")
names(wide_host_gender_b) <- c("session_id", "observer_a", "observer_b")

# merge
wide_host_gender <- rbind(wide_host_gender_a, wide_host_gender_b)

# exclude sessions without double sampling
wide_host_gender <- subset(wide_host_gender, !is.na(observer_a) & !is.na(observer_b)) 

kappa_host_gender <- kappa2(wide_host_gender[,2:3], weight = "unweighted")

kappa_host_gender 

## Example of calculating ICC

#### Audience total
audience_total <- subset(talk, !is.na(audience_total)) # exclude missing data

wide_audience_total <- spread(audience_total[,c("talk_id", "observer_talk", "audience_total")], 
                              observer_talk, audience_total)

# treat observer 1 and 2 as one unit, and observer 3 and 4 as one unit
wide_audience_total_a <- wide_audience_total[,c(1:3)]
wide_audience_total_b <- wide_audience_total[,c(1,4,5)]
names(wide_audience_total_a) <- c("talk_id", "observer_a", "observer_b")
names(wide_audience_total_b) <- c("talk_id", "observer_a", "observer_b")

# merge
wide_audience_total <- rbind(wide_audience_total_a, wide_audience_total_b)

# exclude sessions without double sampling
wide_audience_total <- subset(wide_audience_total, !is.na(observer_a) & !is.na(observer_b)) 

icc_audience_total <- icc(wide_audience_total[,2:3],
                          model = "twoway", #both column (observer) and row (talk) are random
                          type = c("agreement"),
                          unit = c("single"))

icc_audience_total 
```
