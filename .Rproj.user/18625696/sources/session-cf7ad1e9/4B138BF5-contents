---
title: "Abstract submission, registration and awardees"
author: "Ane Liv and Avery"
---

```{r setup, include=FALSE, cache = FALSE}
here::here()
#This code chunk is dedicated to variables containing the path to the folder related to the project. 
figs_dir <- here::here(file.path("plots", "main"))
here_dir <- file.path("plots")
#remember to add a line that saves the figures and tables in the correct folder
#e.g. write_csv(., file.path(figs_dir, "name of table"))
#e.g. ggsave(plot = name_of_plot, filename = file.path(figs_dir, "name of figure"), width = 19, height = 19, unit = "cm", dpi = 500)
```

During abstract submission and congress registration, people were asked to provide us with information on their social identity. Here, we provide a summary of the social identities who submitted an abstract and/or attended the congress. Moreover, we collect information on the people who received an award during the congress.

```{r}
#| label: packages
#| echo: FALSE
invisible(pacman::p_load(dplyr, tidyverse, here, readr, readxl, cowplot, ggplot2, countrycode))
clr <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#FCD12A", "#0072B2", "#D55E00", "#CC79A7", "#B00000", "#009900" )#color blind friendly palette

```

```{r}
#| label: loaddata
#| echo: FALSE

#Data for abstract submissions
Abstract_submission_data <- read_tsv(here("data","metadata", "Abstract_submissions_clean.tsv"), show_col_types = F)

#Data for registrants
Registration_data <- read_tsv(here("data","metadata", "Registration_clean.tsv"), show_col_types = F)

#Data for people receiving awards
Awardees <- read_excel(here("data","metadata","Awardees.xlsx"))

#Country data
Country <- read_csv(here("data","metadata","Countries.csv"), show_col_types = F)
```

```{r}
#| label: continent
#| echo: FALSE
colnames(Country)[4] <- "Country"
colnames(Country)[5] <- "Nationality"
Country$Country[which(Country$Country == "the Netherlands")] <- "Netherlands"
Country$Country[which(Country$Country == "United States")] <- "United States of America"
Country$Country[which(Country$Country == "Philippines")] <- "Phillipines"
Country$Country[which(Country$Country == "Korea (Republic of)")] <- "South Korea"

Country$Nationality[which(Country$Nationality == "Azerbaijani, Azeri")] <- "Azerbaijani"
Country$Nationality[which(Country$Nationality == "Hong Kong, Hong Kongese")] <- "Hong Kongers"
Country$Nationality[which(Country$Nationality == "Argentine")] <- "Argentinian"
Country$Nationality[which(Country$Nationality == "Luxembourg, Luxembourgish")] <- "Luxembourgish"

Abstract_submission_data$Nationality[which(Abstract_submission_data$Nationality == "Korea South")] <- "South Korea"
Abstract_submission_data$Country[which(Abstract_submission_data$Country == "Korea Sout")] <- "South Korea"
Abstract_submission_data$Nationality[which(Abstract_submission_data$Nationality == "Ukrainian")] <- "Ukraine"
Abstract_submission_data$Nationality[which(Abstract_submission_data$Nationality == "Great Britain")] <- "United Kingdom"
Abstract_submission_data$Country[which(Abstract_submission_data$Country == "Great Britain")] <- "United Kingdom"
Abstract_submission_data$Nationality[which(Abstract_submission_data$Nationality == "Republic of Montenegro")] <- "Montenegro"


Registration_data$Nationality[which(Registration_data$Nationality == "Slowenien")] <- "Slovenian"
Registration_data$Nationality[which(Registration_data$Nationality == "	
Republic of Montenegro")] <- "Montenegro"

#Add nationality_continent
Abstract_submission_data <- left_join(Abstract_submission_data, Country[,c("Country", "continent")],
                          by = join_by("Nationality" == "Country"))
colnames(Abstract_submission_data)[18] <- "Nationality_continent"

Registration_data <- left_join(Registration_data, Country[,c("Nationality", "continent")],
                          by = c("Nationality"))
colnames(Registration_data)[8] <- "Nationality_continent"

#add affiliation_continent
Abstract_submission_data <- left_join(Abstract_submission_data, Country[,c("Country", "continent")],
                          by = c("Country"))
colnames(Abstract_submission_data)[19] <- "Affiliation_continent"

#Add expat status (Only applicable for abstract submissions)
Abstract_submission_data$Expat <- Abstract_submission_data$Country == Abstract_submission_data$Nationality
#summary(Abstract_submission_data$Expat) #na's because one of the two wasn't filled out
Abstract_submission_data$Expat <- as.factor(Abstract_submission_data$Expat)
levels(Abstract_submission_data$Expat) <- c("Expat", "No expat") #F = expat, T = no expat

#Categorize countries: sub-continent
#Registration
Registration_data <- Registration_data %>% mutate(Nationality_subcontinent = case_when(
   Nationality == "American" | Nationality == "Canadian" ~ "North America",
   Nationality == "Australian" | Nationality == "New Zealand" ~ "Oceania", 
   Nationality == "Danish" | Nationality =="Finnish" | Nationality == "Norwegian" | Nationality =="Swedish" ~ "North Europe",
   Nationality == "Austrian" | Nationality == "Belgian" | Nationality == "British" |
     Nationality == "Dutch" | Nationality == "French" | Nationality == "German" | Nationality == "Irish" | Nationality =="Swiss" | Nationality =="Luxembourgish" ~ "West Europe",
   Nationality == "Azerbaijani" | Nationality == "Bangladeshi" | Nationality == "Chinese" | Nationality == "Filipino" | Nationality == "Indian" | Nationality == "Iranian" | Nationality == "Israeli" | Nationality == "Japanese" | Nationality == "Lebanese" | Nationality == "Pakistani" | Nationality == "Taiwanese" | Nationality == "Turkish" | Nationality == "Hong Kongers"  |Nationality == "Singaporean" | Nationality == "Thai" | Nationality == "Sri Lankan" | Nationality == "Cypriot" ~ "Asia",
    Nationality == "Argentinian" | Nationality == "Brazilian" | Nationality == "Colombian" | Nationality == "Costa Rican" | Nationality == "Ecuadorian"| Nationality == "Mexican" ~ "South American",
   Nationality == "Croatian" | Nationality == "Czech" | Nationality == "Estonian" | Nationality == "Hungarian" | Nationality == "Montenegrin" | Nationality == "Polish" | Nationality == "Serbian" | Nationality == "Slovenian" | Nationality == "Ukrainian" | Nationality == "Ukraine"  | Nationality == "Russian" | Nationality == "Belarusian" ~ "East Europe",
   Nationality == "Catalan" | Nationality == "Greek" | Nationality == "Italian" | Nationality == "Portugese" | Nationality == "Spanish" ~ "South Europe",
   Nationality == "Nigerian" | Nationality == "Gambian" | Nationality == "Algerian" | Nationality == "Ugandan" | Nationality == "Mauritian" ~ "Africa",
  Nationality == "Dual nationality" ~ "Dual nationality"))

#Abstract submission

Abstract_submission_data <- Abstract_submission_data %>% mutate(Affiliation_subcontinent = case_when(
  Country == "United States" | Country == "United States of America" | Country == "Canada" ~ "North America",
  Country == "Australia" | Country == "New Zealand" ~ "Oceania",
  Country == "Denmark" | Country =="Finland" | Country == "Norway" | Country =="Sweden" ~ "North Europe",
  Country == "Austria" | Country == "Belgium" | Country == "United Kingdom" |
    Country == "the Netherlands" | Country == "Netherlands" | Country == "France" | Country == "Germany" | Country == "Ireland" | Country =="Switzerland" ~ "West Europe",
  Country == "China" | Country == "India" | Country == "Israel" | Country == "Japan"  | Country == "Taiwan (ROC)" | Country == "Philippines" | Country == "Phillipines" | Country == "Hong Kong" | Country == "South Korea" | Country == "Nepal" ~ "Asia",
  Country == "Brazil" | Country == "Costa Rica" | Country == "Colombia" | Country == "Mexico" | Country == "Panama" ~ "South American",
  Country == "Croatia" | Country == "Czech Republic" | Country == "Hungary" | Country == "Russia" | Country == "Poland" | Country == "Belarus" | Country == "Ukraine"~ "East Europe",
  Country == "Catalonia" |  Country == "Italy" | Country == "Portugal" | Country == "Spain" ~ "South Europe",
  Country == "Tanzania" | Country == "Gambia"~ "Africa"),
  Nationality_subcontinent = case_when(
  Nationality == "United States" | Nationality == "United States of America" | Nationality == "Canada" ~ "North America",
  Nationality == "Australia" | Nationality == "New Zealand" ~ "Oceania",
  Nationality == "Denmark" | Nationality =="Finland" | Nationality == "Norway" | Nationality =="Sweden" ~ "North Europe",
  Nationality == "Austria" | Nationality == "Belgium" | Nationality == "United Kingdom" |
    Nationality == "the Netherlands" | Nationality == "Netherlands" | Nationality == "France" | Nationality == "Germany" | Nationality == "Ireland" | Nationality =="Switzerland" ~ "West Europe",
  Nationality == "China" | Nationality == "India" | Nationality == "Israel" | Nationality == "Japan"  | Nationality == "Taiwan (ROC)" | Nationality == "Philippines" | Nationality == "Thailand" | Nationality == "Phillipines" | Nationality == "Hong Kong" | Nationality == "South Korea" | Nationality == "Nepal" | Nationality == "Sri Lanka"| Nationality == "Pakistan"| Nationality == "Turkey" | Nationality == "Cyprus" | Nationality == "Lebanon" | Nationality == "Bangladesh" | Nationality == "Iran" | Nationality == "Singapore"  ~ "Asia",
  Nationality == "Argentina" | Nationality == "Brazil" | Nationality == "Costa Rica" | Nationality == "Colombia" | Nationality == "Mexico" | Nationality == "Panama" | Nationality == "Ecuador" ~ "South American",
  Nationality == "Croatia" | Nationality == "Montenegro" | Nationality == "Czech Republic" | Nationality == "Hungary" | Nationality == "Slovakia" | Nationality == "Russia" | Nationality == "Serbia" | Nationality == "Poland" | Nationality == "Belarus" | Nationality == "Ukraine" ~ "East Europe",
  Nationality == "Catalonia" |  Nationality == "Italy" | Nationality == "Portugal" | Nationality == "Spain" | Nationality == "Greece" ~ "South Europe",
  Nationality == "Tanzania" | Nationality == "Gambia" | Nationality == "Mauritius" | Nationality == "Nigeria" | Nationality == "Algeria" | Nationality == "Uganda" ~ "Africa",
  Nationality == "Dual nationality" ~ "Dual nationality"))
```

## Abstract submission

```{r}
#| label: gender_abstract
#| echo: FALSE
Gender_distribution_abs <- as.data.frame(table(Abstract_submission_data$Pronoun_clean))
colnames(Gender_distribution_abs) <- c("Gender", "Frequency")
Gender_distribution_abs$Gender <- as.character(Gender_distribution_abs$Gender)
Gender_distribution_abs[nrow(Gender_distribution_abs) +1,] <- c("Gender queer", sum(Gender_distribution_abs$Frequency[c(2, 5, 6)]))
Gender_distribution_abs$Level <- "Abstract"
Gender_distribution_abs <- Gender_distribution_abs %>% 
  mutate(Gender = case_when(
    Gender == "He/him" ~ "Male",
    Gender == "She/her" ~ "Female", 
    Gender == "Prefer not to say" ~ "No answer",
    TRUE ~ Gender))
Gender_distribution_abs <- subset(Gender_distribution_abs, Gender == "Female"| Gender == "Male" | Gender == "Gender queer" | Gender == "No answer")

Abstract_submission_data$Gender_cat <- Abstract_submission_data$Pronoun_clean
Abstract_submission_data <- Abstract_submission_data %>% 
  mutate(Gender_cat = case_when(
    Gender_cat == "He/him" ~ "Male",
    Gender_cat == "She/her" ~ "Female", 
    Gender_cat == "Prefer not to say" | Gender_cat == "NA" ~ "No answer",
    Gender_cat == "She/them" | Gender_cat == "He/them" | Gender_cat == "They/them" ~ "Gender queer",
    TRUE ~ Gender_cat)) %>% 
  mutate(Gender_cat = replace_na(Gender_cat, "No answer")) %>%
  mutate(Career_cat = case_when(
    Career_cat == "Students (BSc, MSc, PhD)" ~ "Early career",
    Career_cat == "Post doctorate or almost" | Career_cat == "Senior position, lecturers, researchers" ~  "Mid career",
    Career_cat == "Professor or associate" ~ "Late career", 
    Career_cat == "Other: industry, advocates, technicians" ~ "Other", 
    TRUE ~ Career_cat))
```

```{r}
#| label: nationality_abstract
#| echo: FALSE
Natinality_distribution_abs <- as.data.frame(table(Abstract_submission_data$Nationality))
colnames(Natinality_distribution_abs) <- c("Nationality", "Frequency")

Natinality_distribution_abs$Level <- "Abstract"

#Pie chart of the gender distribution among awardees
Pie_Natinality_distribution_abs <- Natinality_distribution_abs %>% ggplot( aes(x="", y=Frequency, fill=Nationality)) +
  geom_bar(stat="identity", width=1) +
  coord_polar("y", start=0) +
  theme_void() +
  #theme(legend.position="none") +
  ggtitle("Nationality: Abstract submission") 

```

There were a total of `r nrow(Abstract_submission_data)` abstract submissions, of which the majority used she/her pronouns (hereafter referred to as "women") (`r Gender_distribution_abs$Frequency[3]` / `r nrow(Abstract_submission_data)`). (`r Gender_distribution_abs$Frequency[3]` / `r nrow(Abstract_submission_data)`) used he/him pronouns (hereafter referred to as "men"), whereas `r Gender_distribution_abs$Frequency[4]` used she/them, he/them, or they/them pronouns (hereafter referred to as "gender queer").

A total of `r length(unique(Abstract_submission_data$Nationality))-1` nationalities were represented among those who submitted an abstract. The majority of the abstract submitters originated from Europe (`r nrow(subset(Abstract_submission_data, Abstract_submission_data$continent.x == "Europe"))`/`r nrow(Abstract_submission_data)`), followed by Asia (`r nrow(subset(Abstract_submission_data, Abstract_submission_data$continent.x == "Asia"))`/`r nrow(Abstract_submission_data)`), North America (`r nrow(subset(Abstract_submission_data, Abstract_submission_data$continent.x == "North America"))`/`r nrow(Abstract_submission_data)`), South America (`r nrow(subset(Abstract_submission_data, Abstract_submission_data$continent.x == "South America"))`/`r nrow(Abstract_submission_data)`), Oceania (`r nrow(subset(Abstract_submission_data, Abstract_submission_data$continent.x == "Oceania"))`/`r nrow(Abstract_submission_data)`) and lastly Africa (`r nrow(subset(Abstract_submission_data, Abstract_submission_data$continent.x == "Africa"))`/`r nrow(Abstract_submission_data)`). Out of all who submitted an abstract, `r nrow(subset(Abstract_submission_data, Abstract_submission_data$Expat== "Expat"))` were affiliated with another country than their nationality (Expat status).

## Registration

```{r}
#| label: gender_registration
#| echo: FALSE
Gender_distribution_reg <- as.data.frame(table(Registration_data$Pronouns))
colnames(Gender_distribution_reg) <- c("Gender", "Frequency")
Gender_distribution_reg$Level <- "Registration"
Gender_distribution_reg$Gender <- as.character(Gender_distribution_reg$Gender)
Gender_distribution_reg$Level <- "Registrtation"

Registration_data$Career_cat <- Registration_data$Career
Registration_data <- Registration_data %>% 
  mutate(Career_cat = case_when(
    Career_cat == "Post doctorate or almost" ~ "Mid career",
    Career_cat == "Professor or associate" ~ "Late career",
    Career_cat == "Students (BSc, MSc, PhD)" ~ "Early career",
    Career_cat == "Senior position, lecturers, researchers" ~ "Mid career",
    TRUE ~ Career_cat))

#write_csv(Registration_data, here("data","clean", "misc","Registration.csv"))

```

```{r}
#| label: nationality_registration
#| echo: FALSE
Natinality_distribution_reg <- as.data.frame(table(Registration_data$Nationality))
colnames(Natinality_distribution_reg) <- c("Nationality", "Frequency")

Natinality_distribution_reg$Level <- "Registration"

#Pie chart of the gender distribution among awardees
Pie_Natinality_distribution_reg <- Natinality_distribution_reg %>% ggplot( aes(x="", y=Frequency, fill=Nationality)) +
  geom_bar(stat="identity", width=1) +
  coord_polar("y", start=0) +
  theme_void() +
  #theme(legend.position="none") +
  ggtitle("Nationality: Registration") 

view(Pie_Natinality_distribution_reg)
```

There were a total of `r nrow(Registration_data)` registrations, the majority of which were submitted by women (`r Gender_distribution_reg$Frequency[1]` / `r nrow(Registration_data)`). `r Gender_distribution_reg$Frequency[3]` registrants were men, `r Gender_distribution_reg$Frequency[2]` registrants identified as gender queer.

A total of `r length(unique(Registration_data$Nationality))-1` nationalities were represented among those who registered. The majority of registrations originated from Europe (`r nrow(subset(Registration_data, Registration_data$Nationality_continent == "Europe"))`/`r nrow(Registration_data)`), followed by Asia (`r nrow(subset(Registration_data, Registration_data$Nationality_continent == "Asia"))`/`r nrow(Registration_data)`), North America (`r nrow(subset(Registration_data, Registration_data$Nationality_continent == "North America"))`/`r nrow(Registration_data)`), Oceania (`r nrow(subset(Registration_data, Registration_data$Nationality_continent == "Oceania"))`/`r nrow(Registration_data)`), South America (`r nrow(subset(Registration_data, Registration_data$Nationality_continent == "South America"))`/`r nrow(Registration_data)`), and Africa (`r nrow(subset(Registration_data, Registration_data$Nationality_continent == "Africa"))`/`r nrow(Registration_data)`).

## Awards

```{r}
#| label: Awardees
#| echo: FALSE

Awardees <- Awardees %>% 
  mutate(Pronouns = case_when(
    Pronouns == "NA" ~ "No answer",
    TRUE ~ Pronouns)) %>%
    mutate(Affiliation = case_when(
    Affiliation == "NA" ~ "No answer",
    TRUE ~ Affiliation))
```

A total of `r nrow(Awardees)` awards were given at the congress. One Alcock award, 10 'best student talk' awards and three poster awards. The winners were all affiliated with European (including UK) institutions, representing `r length(unique(Awardees$Affiliation))-1` nations. Most winners were associated with German institutions (`r sum(Awardees$Affiliation == "Germany")`/`r nrow(Awardees)-1`). The awards were given to `r sum(Awardees$Pronouns == "She/her")` women and `r sum(Awardees$Pronouns == "He/him")` men, however `r sum(Awardees$Pronouns == "No answer")` did not wish to disclose their pronouns (See @fig-Awardees).

## Figures

```{r, warning=F}
#| label: Merge_data
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
Figure_data <- subset(Abstract_submission_data, select = c("Gender_cat", "Career_cat", "Nationality_subcontinent")) %>% 
  mutate(Gender_cat = factor(Gender_cat, levels = c("Male", "Female", "Gender queer", "No answer"))) %>%
  mutate(Career_cat = factor(Career_cat, levels = c("Early career","Mid career", "Late career", "Other")))
Figure_data$Level <- "Abstract submission"

Figure_data2 <- subset(Registration_data, select = c("Pronouns", "Career_cat", "Nationality_subcontinent")) %>% 
  mutate(Gender_cat = factor(Pronouns, levels = c("Male", "Female", "Gender queer", "No answer"))) %>%
  mutate(Career_cat = factor(Career_cat, levels = c("Early career","Mid career", "Late career", "Other")))
Figure_data2$Level <- "Registration"

Figure_data <- rbind(Figure_data, Figure_data2[2:5])
rm(Figure_data2)
```

```{r}
#| label: fig-gender
#| echo: FALSE
#| fig-cap: Gender distribution
#| warning: FALSE
#| message: FALSE
Gender_distribution <- rbind(Gender_distribution_abs, Gender_distribution_reg)
Gender_distribution$Frequency <- as.numeric(Gender_distribution$Frequency)
Gender_chart <- Gender_distribution %>%
  mutate(Gender = factor(Gender, levels = c("Male", "Female", "Gender queer", "No answer"))) %>%
  ggplot( aes(y=Frequency, x = Gender, fill = Level)) +
  geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.5, alpha = 0.8) +
  scale_fill_manual(values = clr[c(3,6)]) + 
  #guides(fill = F, scale = "none") + #remove the legend
  #ylim(0,120) +
  ggtitle("Gender distribution") +
  ylab("Count") +
  theme_bw()

Gender_chart + theme(
    legend.position = c(0.997, 0.997),
    legend.justification = c("right", "top"),
    legend.box.just = "right",
    legend.margin = margin(6, 6, 6, 6)
    )

# ggsave("Gender_chart.png", plot = Gender_chart, path = "../plots/main", device = "png", width = 23, height = 15, units = "in")
```

```{r}
#| label: Nationality_chart
#| echo: FALSE
#| fig-cap: Nationality chart
#| warning: FALSE
#| message: FALSE
t1 <- as.data.frame(table(Abstract_submission_data$Nationality_subcontinent))
t1 <- t1 %>% 
  arrange(desc(Var1)) %>%
  mutate(Freq = Freq / sum(t1$Freq) *100) %>%
  mutate(ypos = cumsum(Freq)- 0.5*Freq ) %>% 
  mutate(Var1 = case_when(
    Var1 == "South American" ~ "South America",
    TRUE ~ Var1))
t1$Level <- "Abstract submission"
t1$Percent <- round(t1$Freq, 2)
t1 <- mutate(t1, Name = paste(Var1, Percent, "%"))

t2 <- as.data.frame(table(Registration_data$Nationality_subcontinent))
t2 <- t2[c(1:2, 4:10),] #exclude dual nationality
t2 <- t2 %>% 
  arrange(desc(Var1)) %>%
  mutate(Freq = Freq / sum(t2$Freq) *100) %>%
  mutate(ypos = cumsum(Freq)- 0.5*Freq ) %>% 
  mutate(Var1 = case_when(
    Var1 == "South American" ~ "South America",
    TRUE ~ Var1))
t2$Level <- "Registration"
t2$Percent <- round(t2$Freq, 2)
t2 <- mutate(t2, Name = paste(Var1, Percent, "%"))


#Pie chart of the nationality
Pie_1 <- t1 %>% 
  ggplot( aes(x="", y=Freq, fill=Var1)) +
  geom_bar(stat="identity", width=1) +
  coord_polar("y", start=7) +
  scale_fill_manual(values = clr) + 
  theme(legend.position = "none") +
  theme_void() +
  theme(legend.position="none") +
  geom_text(aes(y = ypos, label = Name), color = "white", nudge_x = 0.10, size=4, angle = c(320,35,5,355,345,320,300,75,50)) +
  ggtitle("A) Abstract submission") 

Pie_2 <- t2 %>% 
  ggplot( aes(x="", y=Freq, fill=Var1)) +
  geom_bar(stat="identity", width=1) +
  coord_polar("y", start=7) +
  scale_fill_manual(values = clr) + 
  theme(legend.position = "none") +
  theme_void() +
  theme(legend.position="none") +
  geom_text(aes(y = ypos, label = Name), color = "white", nudge_x = 0.10, size=4, angle = c(315,15,350,340,325,310,290,75,50)) +
  ggtitle("B) Registration") 

Nationalities_pie <- plot_grid(Pie_1, Pie_2)
Nationalities_pie
#Saved to general plots folder and qmd plots folder
#ggsave(plot=Nationalities_pie, filename = file.path(figs_dir, "Nationalities_pie.png"), width = 30, height = 20, unit = "cm", dpi = 500)
#ggsave(plot=Nationalities_pie, filename = file.path(here_dir, "Nationalities_pie.png"), width = 30, height = 20, unit = "cm", dpi = 500)
```

```{r}
#| label: fig-Awardees
#| echo: FALSE
Pronouns_awards <- as.data.frame(table(Awardees$Pronouns))
Pronouns_awards <- Pronouns_awards %>% 
  arrange(desc(Var1)) %>%
  mutate(Freq = Freq / sum(Pronouns_awards$Freq) *100) %>%
  mutate(ypos = cumsum(Freq)- 0.5*Freq )

#Pie chart of the gender distribution among awardees
Pie_pronouns <- Pronouns_awards %>% ggplot( aes(x="", y=Freq, fill=Var1)) +
  geom_bar(stat="identity", width=1) +
  coord_polar("y", start=0) +
  scale_fill_manual(values = clr[c(4,6,8)]) + 
  theme(legend.position = "none") +
  theme_void() +
  theme(legend.position="none") +
  geom_text(aes(y = ypos, label = Var1), color = "white", size=4) +
  ggtitle("B) Gender distribution") 

Affiliation_awards <- as.data.frame(table(Awardees$Affiliation))
Affiliation_awards <- Affiliation_awards %>% 
  arrange(desc(Var1)) %>%
  mutate(Freq = Freq / sum(Affiliation_awards$Freq) *100) %>%
  mutate(ypos = cumsum(Freq)- 0.5*Freq ) 

#Pie chart of the affiliation among awardees
Pie_affiliation <- Affiliation_awards %>% 
  ggplot( aes(x="", y=Freq, fill=Var1)) +
  geom_bar(stat="identity", width=1) +
  coord_polar("y", start=2) +
  scale_fill_manual(values = clr) + 
  theme(legend.position = "none") +
  theme_void() +
  theme(legend.position="none") +
  geom_text(aes(y = ypos, label = Var1), color = "white", nudge_x = 0.15, size=4, angle = c(320,295,90,65,40,0,5,340)) +
  ggtitle("A) Affiliation") 

plot_grid(Pie_affiliation, Pie_pronouns)
#Saved to general plots folder and qmd plots folder
#ggsave(plot=Awardees_pie, filename = file.path(figs_dir, "Awardees.png"), width = 21, height = 12, unit = "cm", dpi = 500)
#ggsave(plot=Awardees_pie, filename = file.path(here_dir, "Awardees.png"), width = 21, height = 12, unit = "cm", dpi = 500)
```

```{r}
#| label: Othercode
#| echo: FALSE
# # get continent data
# urlfile="https://raw.githubusercontent.com/Imagin-io/country-nationality-list/master/countries.csv"
# countries <- read_csv(url(urlfile), show_col_types = F) 
# countries <- countries[!countries$en_short_name == 'United States Minor Outlying Islands',] #causes an error later if not removed
# countries <- as.data.frame(countries)
# countries$continent <- countrycode(sourcevar = countries[, "en_short_name"],
#                                  origin = "country.name",
#                                  destination = "continent")
# 
# ## correct in countries file depending on our output
# countries$nationality[which(countries$nationality == "Slovenian, Slovene")] <- "Slovenian"
# countries$nationality[which(countries$nationality == "Dutch, Netherlandic")] <- "Dutch"
# countries$nationality[which(countries$nationality == "Portuguese")] <- "Portugese"
# countries$nationality[which(countries$nationality == "British, UK")] <- "British"
# countries$nationality[which(countries$nationality == "Hungarian, Magyar")] <- "Hungarian"
# countries$nationality[which(countries$nationality == "Greek, Hellenic")] <- "Greek"
# countries$nationality[which(countries$nationality == "Iranian, Persian")] <- "Iranian"
# countries$nationality[which(countries$nationality == "New Zealand, NZ")] <- "New Zealand"
# countries$nationality[which(countries$nationality == "Philippine, Filipino")] <- "Filipino"
# countries$nationality[which(countries$nationality == "Chinese, Taiwanese")] <- "Taiwanese"
# 
# countries$en_short_name[which(countries$en_short_name == "United States of America")] <- "United States"
# countries$en_short_name[which(countries$en_short_name == "Netherlands")] <- "the Netherlands"
# countries$en_short_name[which(countries$en_short_name == "United Kingdom of Great Britain and Northern Ireland")] <- "United Kingdom"
# countries$en_short_name[which(countries$en_short_name == "Russian Federation")] <- "Russia"
# countries$en_short_name[which(countries$en_short_name == "Tanzania, United Republic of")] <- "Tanzania"
# countries$en_short_name[which(countries$en_short_name == "Taiwan, Province of China")] <- "Taiwan"
# 
# countries <- countries %>% 
#   mutate(continent = case_when(
#     en_short_name %in% c("Argentina","Brazil","Colombia","Ecuador",
#                          "Peru", "Venezuela", "Chile", "Bolivia",
#                          "Paraguay", "Uruguay", "Guyana", "Suriname",
#                          "French Guiana", "Falkland Islands (Malvinas)") ~ "South America",
#     continent == "Americas" ~ "North America", 
#     TRUE ~ continent))
# 
# # write out this file
# save(countries, file = "data/metadata/countries_continents.RData")
# write_csv(countries, file.path(here_dir, "Countries.csv"))
```

# Map for Main Figure

```{r, warning=F, message=F}
#| label: packages2
#| echo: FALSE

invisible(pacman::p_load(dplyr, devtools, tidyverse, maps, here, scatterpie, readr, countrycode, CoordinateCleaner))
#package prismatic maybe?
#devtools::install_github("BlakeRMills/MoMAColors")
#clr <- MoMAColors::moma.colors("VanGogh", 12) %>% color() # just an example of a colour pallette

#https://github.com/Imagin-io/country-nationality-list/blob/master/countries.csv
urlfile="https://raw.githubusercontent.com/Imagin-io/country-nationality-list/master/countries.csv"
CountryList <- read_csv(url(urlfile), show_col_types = FALSE) 
CountryList <- CountryList[!CountryList$en_short_name == 'United States Minor Outlying Islands',] #causes an error later if not removed
```

## Nationality data

```{r}
#| label: Nationalities data
#| echo: FALSE
#here() #EDI-behaviour2023
Nationalities <- read.csv("../data/metadata/Nationalities_Nayden.csv")
```

```{r}
#| label: Data exploration
#| echo: FALSE
#| tbl-cap: Quick overview

#First count entries, no. of NAs (missing info)
Total_entries <- nrow(Nationalities)
NAs <- sum(is.na(Nationalities$Nationality))
Nationalities <- na.omit(Nationalities)
Dual_nationality <- length(Nationalities[Nationalities$Nationality == 'Dual nationality',]) 
Total_Nationalities <- as.data.frame(Nationalities[!Nationalities$Nationality == 'Dual nationality',])
colnames(Total_Nationalities)[1] <- "Nationality"
No_Nationalities <- nrow(unique(Total_Nationalities)) 

Summary <- cbind(Total_entries, Dual_nationality, No_Nationalities, NAs)
colnames(Summary) <- c("Total", "Dual nationality", "No. of nationalities", "Not given")
#knitr::kable(Summary, align = "c")
```

### Continent and country representation

A total of `r No_Nationalities` nationalities were represented.

```{r}
#| label: Country and continent
#| echo: FALSE
#| tbl-cap: Continent representation
#| fig-cap: Representation pie chart
#Combine the nationalities df with the CountryList to retrived Country info
#Some of the countries seem to be missing from the CountryList data
Country <- left_join(Total_Nationalities, CountryList[, c(4,5)], join_by("Nationality" == "nationality"))

Missing <- unique(Country[!complete.cases(Country), ])
Missing_countries <- rbind("Hungary", "United Kingdom", "Azerbaijan", "Greece", "Portugal", "New Zealand", "Hong Kong", "Netherlands", "Argentina", "Taiwan", "Iran", "Slovenia", "Ukraine", "Luxembourg", "Slovenia")
Missing <- as.data.frame(cbind(Missing[, 1], Missing_countries))
colnames(Missing) <- c("nationality", "en_short_name")
CountryList <- rbind(CountryList[, c(4,5)], Missing)

Country <- left_join(Total_Nationalities, CountryList, join_by("Nationality" == "nationality"))
Country$Continent <- countrycode(sourcevar = Country[, "en_short_name"],
                            origin = "country.name",
                            destination = "continent")

Country <- Country %>% 
  mutate(Continent = case_when(
    en_short_name %in% c("Argentina","Brazil","Colombia","Ecuador") ~ "South America",
    Continent == "Americas" ~ "North America", 
    TRUE ~ Continent))

#Number of countries per continent
Continent <- Country %>%
  group_by(Continent) %>%
  summarize(Countries = n_distinct(en_short_name))

#frequency per country
Per_country <- Country %>% 
  group_by(Continent) %>%
  reframe(as.data.frame(table(en_short_name)))

#number of individuals per continent
Attendees <- Per_country %>% 
  group_by(Continent) %>% summarize(Attendees = sum(Freq))

Continent$Participation <- Attendees$Attendees

knitr::kable(Continent, align = "c")

#Second table listing numbers of people attending from each country
#knitr::kable(Per_country, align = "c")
#Represent with a pie chart
pie(Continent$Countries, labels = Continent$Continent)

#We want the latitude and longitude data for all the countries
data("countryref")
countryref <- countryref[,c("name","centroid.lon", "centroid.lat")]
countryref <- countryref[!duplicated(countryref[1]),] #some countries have multiple centroids?

#The following corrects the names for the left_join function
countryref <- countryref %>% 
  mutate(name = case_when(
    name == "Czechia" ~ "Czech Republic", 
    name == "United States" ~ "United States of America",
    name == "Hong Kong SAR China" ~ "Hong Kong",
    name == "Russia" ~ "Russian Federation",
    TRUE ~ name))

#Some countries are missing
#Registration <- rbind("USA", "UK", "Sri Lanka", "Cyprus", "Gambia", "Ireland", "Israel", "Lebanon", "Mauritius", "Montenegro", "Nigeria", "Russia", "Singapore")

Participants <- left_join(Country, countryref, join_by("en_short_name" == "name"))

Participants <- Participants %>% 
  mutate(en_short_name = case_when(
    en_short_name == "United Kingdom" ~ "UK", 
    en_short_name == "United States of America" ~ "USA",
    en_short_name == "Russian Federation" ~ "Russia",
    TRUE ~ en_short_name))

table(Participants$en_short_name)
```

## Map

Now, we can build our map.

```{r}
#| label: World map
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
# https://www.geeksforgeeks.org/how-to-make-world-map-with-ggplot2-in-r/
# data for world coordinates using map_data() function 
world_coordinates <- map_data("world") 
#table(Participants$Continent)

ParticipantsAfrica <- subset(Participants, Continent == "Africa")
# create world map using ggplot() function 
map <- ggplot() + 
  
# geom_map() function takes world coordinates  
# plot world map
  geom_map( 
    data = world_coordinates, map = world_coordinates, 
    aes(long, lat, map_id = region, fill = en_short_name),
    fill = "gray15"
  ) +
#add layers of the different continents to control the color
  #Europe
    geom_map( 
    data = world_coordinates %>% filter(region == Participants$en_short_name & Participants$Continent == "Europe"), map = world_coordinates, 
    aes(long, lat, map_id = region, fill = en_short_name), 
    fill = "#E69F00", color = "gray15" 
  ) +
  #Africa
     geom_map( 
    data = world_coordinates %>% filter(region == ParticipantsAfrica$en_short_name), map = world_coordinates, 
    aes(long, lat, map_id = region, fill = en_short_name), 
    fill = "#56B4E9", color = "grey15", alpha = 0.50 
  ) +
  #Asia
     geom_map( 
    data = world_coordinates %>% filter(region == Participants$en_short_name & Participants$Continent == "Asia"), map = world_coordinates, 
    aes(long, lat, map_id = region, fill = en_short_name), 
    fill = "#009E73", color = "gray15", alpha = 0.90 
  ) +
  #North America
     geom_map( 
    data = world_coordinates %>% filter(region == Participants$en_short_name & Participants$Continent == "North America"), map = world_coordinates, 
    aes(long, lat, map_id = region, fill = en_short_name), 
    fill = "#F0E442", color = "gray15", alpha = 0.80  
  ) +
  #South America
     geom_map( 
    data = world_coordinates %>% filter(region == Participants$en_short_name & Participants$Continent == "South America"), map = world_coordinates, 
    aes(long, lat, map_id = region, fill = en_short_name), 
    fill = "#D55E00", color = "gray15", alpha = 0.70 
  ) +
  #Oceania
     geom_map( 
    data = world_coordinates %>% filter(region == Participants$en_short_name & Participants$Continent == "Oceania"), map = world_coordinates, 
    aes(long, lat, map_id = region, fill = en_short_name), 
    fill = "#CC79A7", color = "gray15", alpha = 0.60 
  ) +
# geom_point function is used to plot scatter plot on top  of world map 
#geom_point(shape = 20, 
  #  data = Participants, 
  #  aes(centroid.lon, centroid.lat, color = Continent, size = en_short_name, stroke = 0), 
  #  alpha = 1 
  #) +
#theme_bw() +
guides(size = "none") +
labs(Title = "Representation world map", x = "Longitude", y = "Latitude")
#map
#ggsave("Participationmap.png", plot = map, path = "../plots/collect_summarize", device = "png", width = 23, height = 15, units = "in")
```

```{r}
#| label: World map (Gender)
#| echo: FALSE
#| fig-width: 10
#| fig-height: 8

#Dataset based on registrants

Registration <- read_csv(here("data","metadata","Registration.csv"), show_col_types = F)
#table(Registration$Nationality)
#Make pie data: country, long, lat, female, male, queer, no answer, total
#Europe
Europe <- as.data.frame(table(subset(Registration, Nationality_continent == "Europe", select = c(Pronouns)))) 
Europe <- as.data.frame(t(Europe)) %>%
  `colnames<-`(.[1, ]) %>%
  .[-1, ] %>% 
  mutate_if(is.character, as.numeric) %>% 
  mutate(Total = rowSums(.)) %>%
  mutate(Continent = "Europe") %>%
  mutate(Name = "Germany")

#Africa
Africa <- as.data.frame(table(subset(Registration, Nationality_continent == "Africa", select = c(Pronouns)))) 
Africa <- as.data.frame(t(Africa)) %>%
  `colnames<-`(.[1, ]) %>%
  .[-1, ] %>% 
  mutate_if(is.character, as.numeric) %>% 
  mutate(Total = rowSums(.)) %>%
  mutate(Continent = "Africa") %>%
  mutate(Name = "Chad")

#Asia
Asia <- as.data.frame(table(subset(Registration, Nationality_continent == "Asia", select = c(Pronouns)))) 
Asia <- as.data.frame(t(Asia)) %>%
  `colnames<-`(.[1, ]) %>%
  .[-1, ] %>% 
  mutate_if(is.character, as.numeric) %>% 
  mutate(Total = rowSums(.)) %>%
  mutate(Continent = "Asia") %>%
  mutate(Name = "India")

#North America
NorthA <- as.data.frame(table(subset(Registration, Nationality_continent == "North America", select = c(Pronouns)))) 
NorthA <- as.data.frame(t(NorthA)) %>%
  `colnames<-`(.[1, ]) %>%
  .[-1, ] %>% 
  mutate_if(is.character, as.numeric) %>% 
  mutate(Total = rowSums(.)) %>%
  mutate(Continent = "North America") %>%
  mutate(Name = "United States of America") 

#South America
SA <- as.data.frame(table(subset(Registration, Nationality_continent == "South America", select = c(Pronouns)))) 
SA <- as.data.frame(t(SA)) %>%
  `colnames<-`(.[1, ]) %>%
  .[-1, ] %>% 
  mutate_if(is.character, as.numeric) %>% 
  mutate(Total = rowSums(.)) %>%
  mutate(Continent = "South America") %>%
  mutate(Name = "Brazil")

#Oceania
Oceania <- as.data.frame(table(subset(Registration, Nationality_continent == "Oceania", select = c(Pronouns)))) 
Oceania <- as.data.frame(t(Oceania)) %>%
  `colnames<-`(.[1, ]) %>%
  .[-1, ] %>% 
  mutate_if(is.character, as.numeric) %>% 
  mutate(Total = rowSums(.)) %>%
  mutate(Continent = "Oceania") %>%
  mutate(Name = "Australia")

#As centroid, use central country in each continent
Data_GenderPie <- bind_rows(Africa, Asia, Europe, NorthA, SA, Oceania)
Data_GenderPie <- left_join(Data_GenderPie, countryref, join_by("Name" == "name"))

Data_GenderPie[is.na(Data_GenderPie)] <- 0

Gendermap <- map +
  geom_scatterpie(aes(x=centroid.lon, y=centroid.lat, r = 5), 
                  data = Data_GenderPie, cols = colnames(Data_GenderPie[,c(1:2, 6:7)]))

source("../scripts/EDI_ggplot_theme.R")
Gendermap <- Gendermap + theme(
    legend.position = c(0.997, 0.043),
    legend.justification = c("right", "bottom"),
    legend.box.just = "right",
    legend.margin = margin(6, 6, 6, 6)
    ) + scale_fill_discrete(name = "Gender")

ggsave("Gendermap.png", plot = Gendermap, path = "../plots/collect_summarize", device = "png", width = 23, height = 15, units = "in")
```
